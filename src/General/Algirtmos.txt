# useCustomMemo

const hasChanged = (prevDeps, nextDeps) => {
    if(prevDeps === null) return false;
    if(prevDeps.length !== nextDeps.length) return false

    for(let i = 0 ; i < prevDeps.length; i++){
        if(!Object.is(prevDeps[i], nextDeps[i])){
            return true
        }
    }

    return false
}

const useCustomMemo = (cb, deps) => {

  const memoizedRef = useRef();
  // Changes in deps
  if (!memoizedRef.current || hasChanged(memoizedRef.current.deps, deps)) {
    memoizedRef.current = {
      value: cb(),
      deps
    };
  }
  // cleanup logic
  useEffect(() => {
    return () => {
      memoizedRef.current = null
    };
  }, [deps])

  // return the memoised value (if any)
  return memoizedRef.current.value;
};



 # Reverse string

 let l = 0
 let r = length - 1

 while (l < r) {
    const auxL = array[l]
    array[l] = array[r]
    array[r] = auxL

    l+=1
    r-=1
 }

# numero palimdromo

 var isPalindrome = function(x) {
    str = x+'';
    let p1 = 0;
    let p2= str.length-1;

    while(p1<p2){
        if(str[p1] != str[p2]){
            return false;
        }
        p1++;
        p2--;
    }
    return true;
};


 - CONTAINS DUPLICATED

 perguntas: square
 whats is the temporal complexity expected?

 what is the array size? -> brute force O(n^2) memory O(1)

 using hashmap wuld be O(n) but the memory is also O(n)


 - TOW SUM

 const towSum = (target, nums) => {
  let hash = {};
  let answer = [];

  nums.forEach((num, index) => {
    const complement = target - num;
    if (hash[complement] !== undefined) {
      answer = [hash[complement], index];
    }
    hash[num] = index;
  });
  return answer;
};


# palindrome

var isPalindrome = function(x) {
    if(x < 0) return false
    if(x === 0) return true
    const stringX = String(x)
    let i = 0
    let j = stringX.length -1
    let flag = true
    while(i < j && flag){
        if(stringX[i] !== stringX[j]) flag = false
        i++
        j--
    }
    
    return flag;
};

#binary search O(log n)

const binarySearch = (target, nums) => {
  let left = 0;
  let right = nums.length - 1;

  while (left <= right) {
    let middle = Math.floor((left + right) / 2);

    if (nums[middle] > target) {
      right = middle - 1;
    } else if (nums[middle] < target) {
      left = middle + 1;
    } else {
      return middle;
    }
  }

  return -1;
};

const quicksort = (arr = []) => {
  const pivot = arr.length - 1;
  let i = 0;

  if (arr.length <= 1) return arr;
  const left = [];
  const rigth = [];

  while (i < pivot) {
    if (arr[i] <= arr[pivot]) {
      left.push(arr[i]);
    } else {
      rigth.push(arr[i]);
    }
    i++;
  }
  return [...quicksort(left), arr[pivot], ...quicksort(rigth)];
};

const quickParentFunction = (array) => {
  
}

const quicksort2 = (arr = []) => {
  const pivot = arr.length - 1;
  
};

const longestStreak = (arr = []) => {
  //OPERAÇÃO CUSTA O(n)
  const array_set = new Set(arr);
  let longestValue = 0;

  arr.forEach((num) => {
    //SO PROCURO POR INICIO DE SEQUENCIAS, OU SEJA, NÃO TEM VALOR ANTERIOR
    if (!array_set.has(num - 1)) {
      let currentNum = num;
      let currentStreak = 1;

      while (array_set.has(currentNum + 1)) {
        currentNum = currentNum + 1;
        currentStreak = currentStreak + 1;
      }
      if (longestValue < currentStreak) {
        longestValue = currentStreak;
      }
    }
  });

  return longestValue;
};

const inverseOnlyLetters = (str) => {
  let arr = str.split("");
  let i = 0;
  let j = arr.length - 1;

  while (i < j) {
    while (arr[i] === "-") i++;
    while (arr[j] === "-") j--;

    const aux = arr[i];
    arr[i] = arr[j];
    arr[j] = aux;
    i++;
    j--;
  }
  return arr.join("");
};